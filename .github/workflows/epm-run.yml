name: ep-migrate run

on:
  workflow_dispatch:
    inputs:
      sourceEpV1Token:
        description: 'Source Ep V1 token'
        required: true
        type: string
      targetEpV2ApplicationDomainPrefix:
        description: 'Ep V2 application domain prefix for solace-iot-team'
        required: true
        type: string
      # logLevel:
      #   description: 'log level'
      #   required: true
      #   default: 'warning'
      #   type: choice
      #   options:
      #   - info
      #   - warning
      #   - debug
      # tags:
      #   description: 'Test scenario tags'
      #   required: false
      #   type: boolean
      # environment:
      #   description: 'Environment to run tests against'
      #   type: environment
      #   required: true
env:
  EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V1: ${{ inputs.sourceEpV1Token }}
  EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V2: ${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}
  EP_MIGRATE_CLI_V2_APPLICATION_DOMAIN_PREFIX: ${{ inputs.targetEpV2ApplicationDomainPrefix }}
  EP_MIGRATE_CLI_LOGS_DIR: "./logs"

jobs:
  ep_migrate:
    name: Run ep-migrate
    # timeout-minutes: 15
    runs-on: ubuntu-20.04
    steps:
      # - name: Log Inputs
      #   run: |
      #     # echo "EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V1: $EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V1"
      #     echo "EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V2: $EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V2"
      #     echo "EP_MIGRATE_CLI_V2_APPLICATION_DOMAIN_PREFIX: $EP_MIGRATE_CLI_V2_APPLICATION_DOMAIN_PREFIX"

      - name: Check Auth
        if: github.event_name == 'workflow_dispatch' && (github.actor != 'ricardojosegomezulmke' || github.actor != 'nilseckert')
        run: |
          echo "not authorized"
          echo "{IS_AUTHORIZED}={false}" >> $GITHUB_OUTPUT
        id: auth
      - name: Cancel Workflow
        if: ${{ always() && steps.auth.outputs.IS_AUTHORIZED == 'false' }}
        uses: andymckay/cancel-action@0.2

      # - name: Check out code
      #   uses: actions/checkout@v3
      #   with:
      #     fetch-depth: 2

      # - name: Setup Python Environment
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.8

      # - name: Install Python dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r docs/devel/docs.requirements.txt

      # - name: Setup Node.js environment
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 16
      #     cache: 'yarn'

      # - name: Install dependencies
      #   run: yarn install --frozen-lockfile

      # - name: Build
      #   run: yarn build

      - name: Create config file
        run: |
          echo "
            logger:
              logSummary2Console: true
              logLevel: info
              logFile: ${EP_MIGRATE_CLI_LOGS_DIR}/ep-migrate.log
              prettyPrint: true
              log2Stdout: false
              epSdkLogLevel: silent
            epV1:
              apiUrl: https://api.solace.cloud
              token: ${EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V1}
            epV2:
              apiUrl: https://api.solace.cloud
              token: ${EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V2}
            migrate:
              epV1:
                applicationDomainNames:
                  include: 
                    # - 'Acme Rideshare'
                    # - 'default'
                    - 'EP_MIGRATE/TEST'
                    # - 'EP_MIGRATE-topic-domain-enum'
                    # - 'EP_MIGRATE/domain/filter/1'
                    # - 'EP_MIGRATE/domain/filter/2'
                    # - 'EP_MIGRATE/fail/topicDomain/NonExistentEnum'
                    # - 'EP_MIGRATE/fail/topicDomain/EnumWithIssue'
              epV2:
                applicationDomainPrefix: ${EP_MIGRATE_CLI_V2_APPLICATION_DOMAIN_PREFIX}
                versions:
                  initialVersion: 1.0.0
                  versionStrategy: bump_patch      
                  state: Released
              enums:
                epV2:
                  applicationDomainName: 'enums'
              applicationDomains:
                epV2:
              schemas:
                epV2:
              events:
                epV2:
              applications:
                epV2:
                  environment:
                    environmentName: 'TEST_EP_MIGRATE/epV1'
                    eventMeshName: 'TEST_EP_MIGRATE/epV1'
                    eventBrokerName: 'TEST_EP_MIGRATE/epV1'   
          " > ep-migrate-config.yaml

      - name: Run ep-migrate
        run: |

          npm install @solace-labs/ep-migrate -g

          ep-migrate

      - name: Archive logs
        # if: ${{ (failure() && !cancelled()) || (always() && (github.event_name=='workflow_dispatch' || env.DEBUG_FLAG=='true') ) }}
        uses: actions/upload-artifact@v3
        with:
          name: epm-run-logs
          path: ${{ github.workspace }}/${{ env.EP_MIGRATE_CLI_LOGS_DIR }}
          if-no-files-found: error


# build:
  #   name: Build and Test
  #   # timeout-minutes: 15
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 2

  #     - name: Setup Python Environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8

  #     - name: Install Python dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r docs/devel/docs.requirements.txt

  #     - name: Setup Node.js environment
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Compile
  #       run: yarn compile

  #     - name: Lint
  #       run: yarn lint

  #     - name: Build
  #       run: |
  #         yarn clean
  #         yarn build

  #     - name: Test
  #       run: |
  #         export CI=true
  #         # TEST_SC_OPEN_API_NODE
  #         export TEST_SC_OPEN_API_NODE_SOLACE_CLOUD_TOKEN="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         # TEST_EP_OPEN_API_NODE
  #         export TEST_EP_OPEN_API_NODE_SOLACE_CLOUD_TOKEN="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         # TEST_EP_V1_OPEN_API_NODE
  #         export TEST_EP_V1_OPEN_API_NODE_SOLACE_CLOUD_TOKEN="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         # TEST_EP_RT_OPEN_API_NODE
  #         export TEST_EP_RT_OPEN_API_NODE_SOLACE_CLOUD_TOKEN="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         # TEST_EP_APIM_OPEN_API_NODE
  #         export TEST_EP_APIM_OPEN_API_NODE_SOLACE_CLOUD_TOKEN="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         # TEST_SEMPV2_CONFIG_OPEN_API_NODE
  #         export TEST_SEMPV2_CONFIG_OPEN_API_NODE_SOLACE_CLOUD_TOKEN="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         export TEST_SEMPV2_CONFIG_OPEN_API_NODE_HOST="${{ secrets.TEST_SEMPV2_HOST }}"
  #         export TEST_SEMPV2_CONFIG_OPEN_API_NODE_MSG_VPN_NAME="${{ secrets.TEST_SEMPV2_MSG_VPN_NAME }}"
  #         export TEST_SEMPV2_CONFIG_OPEN_API_NODE_PASSWORD="${{ secrets.TEST_SEMPV2_PASSWORD }}"
  #         export TEST_SEMPV2_CONFIG_OPEN_API_NODE_USERNAME="${{ secrets.TEST_SEMPV2_USERNAME }}"
  #         # TEST_EP_SDK
  #         export TEST_EP_SDK_SOLACE_CLOUD_TOKEN="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         export TEST_EP_SDK_TOKEN_NO_APPLICATION_DOMAINS_PERMISSIONS="${{ secrets.TEST_SOLACE_CLOUD_TOKEN_NO_NO_APPLICATION_DOMAINS_PERMISSIONS }}"
  #         # TEST_EP_ASYNC_API_IMPORTER
  #         export TEST_EP_ASYNC_API_IMPORTER_SOLACE_CLOUD_TOKEN="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         # TEST_EP_MIGRATE
  #         export EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V1="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
  #         export EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V2="${{ secrets.TEST_SOLACE_CLOUD_TOKEN }}"
          
  #         # run test: ep-migration
  #         yarn test --filter=ep-migrate

  #         # run test: ep-async-api-importer
  #         yarn test --filter=ep-async-api-importer

  #         # run test: all the remaining
  #         yarn test
