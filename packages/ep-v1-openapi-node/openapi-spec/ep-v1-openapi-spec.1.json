{
  "openapi": "3.0.1",
  "info": {
    "title": "Event Portal Open API",
    "description": "# REST API Concepts\n\nSolace PubSub+ Event Portal provides a RESTful API that you can use to manage your data in PubSub+ Cloud. The REST API allows you to model your event-driven architectures from your own client applications.\n\nThe following document describes the public REST APIs available in the event portal.\n\n",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.solace.cloud",
      "description": "Solace PubSub+ Cloud"
    }
  ],
  "security": [
    {
      "APIToken": []
    }
  ],
  "paths": {
    "/api/v1/eventPortal/tags/{id}": {
      "get": {
        "tags": ["Tags"],
        "summary": "Retrieves a tag",
        "description": "Use this API to retrieve a single tag by its ID.",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The single tag.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tags"],
        "summary": "Updates a tag",
        "description": "Use this API to update a tag.",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tag object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The tag.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated tag.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tags"],
        "summary": "Deletes a tag",
        "description": "Use this API to delete a tag. The tag must not be in use by any objects else it cannot be deleted.",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/schemas/{id}/tags": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Retrieves the tags of a schema",
        "description": "Use this API to retrieve all of the tags of a schema. Tags are referenced by their tag ID.",
        "operationId": "list_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema to retrieve the tags.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tags identified by their tag ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Schemas"],
        "summary": "Updates the tags of a schema.",
        "description": "Use this API to update all of the tags of a schema. Tags are referenced by their tag ID.",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of tag IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "['1234567a', '2345678b']"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of the updated tags identified by their tag ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/schemas/{id}/owners": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Retrieves the owners of a schema",
        "description": "Use this API to retrieve all of the owners of a schema. Owners are referenced by their user ID.",
        "operationId": "list_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema to retrieve the owners.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of owners identified by their user ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Schemas"],
        "summary": "Updates the owners of a schema",
        "description": "Use this API to update all of the owners of schema. Owners are referenced by their user ID.",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of user IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "['12345678', '23456789']"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of updated owners identified by their user ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/events/{id}/tags": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieves the tags of an event",
        "description": "Use this API to retrieve all of the tags of an event. Tags are referenced by their tag ID.",
        "operationId": "list_6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event to retrieve the tags.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tags identified by their tag ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Events"],
        "summary": "Updates the tags of an event",
        "description": "Use this API to update all of the tags of an event. Tags are referenced by their tag ID.",
        "operationId": "update_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of tag IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "['1234567c', '2345678d']"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of the updated tags identified by their tag ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/events/{id}/owners": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieves the owners of an event",
        "description": "Use this API to retrieve all of the owners of an event. Owners are referenced by their user ID.",
        "operationId": "list_7",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event to retrieve the owners.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of owners identified by their user ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Events"],
        "summary": "Updates the owners of an event",
        "description": "Use this API to update all of the owners of an event. Owners are referenced by their user ID.",
        "operationId": "update_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of user IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "['1234567a', '2345678b']"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of updated owners identified by their user ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/applications/{id}/tags": {
      "get": {
        "tags": ["Applications"],
        "summary": "Retrieves the tags of an application",
        "description": "Use this API to retrieve all of the tags of an application. Tags are referenced by their tag ID.",
        "operationId": "list_10",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application to retrieve the tags.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tags identified by their tag ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Applications"],
        "summary": "Updates the tags of an application",
        "description": "Use this API to update all of the tags of an application. Tags are referenced by their tag ID.",
        "operationId": "update_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of tag IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "['1234567e', '2345678f']"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of the updated tags identified by their tag ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/applications/{id}/owners": {
      "get": {
        "tags": ["Applications"],
        "summary": "Retrieves the owners of an application",
        "description": "Use this API to retrieve all of the owners of an application. Owners are referenced by their user ID.",
        "operationId": "list_11",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application to retrieve the owners.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of owners identified by their user ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Applications"],
        "summary": "Updates the owners of an application",
        "description": "Use this API to update all the owners of an application. Owners are referenced by their user ID.",
        "operationId": "update_6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of user IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "['12345678', '23456789']"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of updated owners identified by their user ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/applicationDomains/{id}/owners": {
      "get": {
        "tags": ["Application Domains"],
        "summary": "Retrieves the owners of an application domain.",
        "description": "Use this API to retrieve all of the owners of an application domain. Owners are referenced by their user ID.",
        "operationId": "list_13",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application domain to retrieve the owners.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of owners identified by their user ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Application Domains"],
        "summary": "Updates the owners of an application domain",
        "description": "Use this API to update all of the owners of an application domain. Owners are referenced by their user ID.",
        "operationId": "update_7",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application domain object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of user IDs.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "['12345678', '23456789']"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application domain object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/virtualBrokers": {
      "get": {
        "tags": ["VirtualBrokers"],
        "summary": "Gets Virtual Broker (Logical Event Mesh) objects",
        "description": "Use this API to retrieve a list of Virtual Brokers that match the given parameters.",
        "operationId": "list",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of Virtual Brokers to get per page. Min: 1 Max: 100",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get. Min: 1",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the Virtual Brokers to partially match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brokerType",
            "in": "query",
            "description": "Broker type for the Virtual Brokers to match on.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["unspecified", "solace", "kafka"]
            }
          },
          {
            "name": "names",
            "in": "query",
            "description": "Match only Virtual Brokers with the given names separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only Virtual Brokers with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "levelDelimiter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of virtualBrokers and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualBrokersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["VirtualBrokers"],
        "summary": "Creates a Virtual Broker (Logical Event Mesh)",
        "description": "Use this API to create a Virtual Broker. The Virtual Broker is the virtual representation of the overall topic taxonomy represented by a Logical Event Mesh. It includes the entire tree structure of all the defined Topic Addresses that are associated with it. An Organization may have 1..* Virtual Brokers. An Event can be associated with 1..* Virtual Brokers. Each Virtual Broker address must conform to the given Topic Tree’s event broker type.",
        "operationId": "add",
        "requestBody": {
          "description": "The Virtual Broker object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/VirtualBroker"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a Virtual Broker. The newly saved Virtual Broker object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualBrokerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/tags": {
      "get": {
        "tags": ["Tags"],
        "summary": "Gets the tags",
        "description": "Use this API to retrieve a list of tags that match the given parameters.",
        "operationId": "list_1",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of tags to get per page. Min: 1 Max: 100",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get. Min: 1",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the tag to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only tags with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of tags and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TagsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tags"],
        "summary": "Creates a tag",
        "description": "Tags can be created to organize the objects of your event-driven architecture. Assign tags to objects to make them easier to group and find.",
        "operationId": "add_1",
        "requestBody": {
          "description": "Tags require a name.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a tag. The newly saved tag is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/schemas": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Gets the schema objects",
        "description": "Use this API to retrieve a list of schemas that match the given parameters.",
        "operationId": "list_2",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of schemas to get per page. Min: 1 Max: 100",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get. Min: 1",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the schema to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Match only with shared or unshared schemas.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "Match only schemas in the given application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only schemas with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of schemas and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemasResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Schemas"],
        "summary": "Creates a schema object",
        "description": "To model your event-driven architecture, schemas are a fundamental building block for modelling the payloads of the events flowing through your system. Use this API to create schemas that can later be referenced by events.",
        "operationId": "add_2",
        "requestBody": {
          "description": "The schema requires a name, an application domain, and a content type (one of XML, JSON, AVRO, Binary, or Text). For JSON, AVRO and XML based schemas, the content field must be populated with a valid JSON schema or XML schema (XSD or DTD). Schema content may be versioned by setting the content field of the schema version object(s); in this case, the schema content field must not be set. Either the schema content field or versions field may be set at one time, not both. A schema should be marked as shared when it is allowed to be used by other application domains. To avoid sharing a schema with other application domains, do not share it. The description field should be populated to describe to other users what the schema is and how it should be used (much like this description you're reading is describing the schema of this API).",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a schema. The newly saved schema object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/events": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets the event objects",
        "description": "Use this API to retrieve a list of events that match the given parameters.",
        "operationId": "list_5",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of events to get per page. Min: 1 Max: 100",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get. Min: 1",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the event to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topicName",
            "in": "query",
            "description": "Topic name of the event to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brokerType",
            "in": "query",
            "description": "Broker type of the event to match on.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["unspecified", "solace", "kafka"]
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Match only on shared or unshared events.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "schemaId",
            "in": "query",
            "description": "Match only events which use the given schema.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keySchemaId",
            "in": "query",
            "description": "Match only events which use the given key schema.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "Match only events in the given application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "virtualBrokerId",
            "in": "query",
            "description": "Match only events in the given virtual broker.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only events with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of events and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Events"],
        "summary": "Creates an event object",
        "description": "Events are the primary building block of an event-driven architecture. Applications publish and subscribe to events and events reference schemas. Events are created with a topic that they are published to, and subscribers subscribe to that topic to receive events from the event broker.In the Event Portal, an event is a type of event as opposed to a specific event instance.",
        "operationId": "add_3",
        "requestBody": {
          "description": "The event requires a name and an application domain ID.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event. The newly saved event object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/enums": {
      "get": {
        "tags": ["Enums"],
        "summary": "Gets the enum objects.",
        "description": "Use this API to retrieve a list of enums that match the given parameters.",
        "operationId": "list_8",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of enums to get per page. Min: 1 Max: 100",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get. Min: 1",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the enum to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "names",
            "in": "query",
            "description": "Match only enums with the given names separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only enums with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of enums and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EnumsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Enums"],
        "summary": "Creates an enum object.",
        "description": "Use this API to create an enum. Enums represent a bounded set of acceptable values defined for a topic address level.",
        "operationId": "add_4",
        "requestBody": {
          "description": "Enums must have a name, Virtual Broker (Logical Event Mesh) type, and a set of values.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Enum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EnumResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/applications": {
      "get": {
        "tags": ["Applications"],
        "summary": "Gets the application objects",
        "description": "Use this API to retrieve a list of applications that match the given parameters.",
        "operationId": "list_9",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of applications to get per page. Min: 1 Max: 100",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get. Min: 1",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the application to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "Match only applications in the given application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only applications with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationClass",
            "in": "query",
            "description": "Match only applications with the given application class.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "unspecified",
                "kafka_connector",
                "solace_connector",
                "kafka_application"
              ]
            }
          },
          {
            "name": "virtualBrokerIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of applications and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Applications"],
        "summary": "Creates an application object",
        "description": "To model your event-driven architecture, applications are a fundamental building block for modelling the producers and consumers of events. Use this API to create applications and model the events they produce and consume.",
        "operationId": "create",
        "requestBody": {
          "description": "Applications have a name and live within an application domain. Events can be added to the application as produced or consumed.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Application"
                  },
                  {
                    "$ref": "#/components/schemas/KafkaConnectorDTO"
                  },
                  {
                    "$ref": "#/components/schemas/SolaceConnectorDTO"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an application. Returns the newly saved application object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/applications/{id}/generateAsyncApiRequest": {
      "post": {
        "tags": ["AsyncApi", "AsyncAPI"],
        "summary": "Generates an AsyncApi document from an Event Portal application",
        "description": "Use this API to generate the AsyncApi document of an application object.",
        "operationId": "generateAsyncApi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "asyncApiVersion: The version of the AsyncApi specification that you want to generate. Currently, we support version 2.0.0.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAsyncAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the AsyncApi document as a string.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/applicationDomains": {
      "get": {
        "tags": ["Application Domains"],
        "summary": "Gets the application domain objects",
        "description": "Use this API to retrieve a list of application domains that match the given parameters.",
        "operationId": "list_12",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of application domains to get per page. Min: 1 Max: 100",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get. Min: 1",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name to be used to match the application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only application domains with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topicDomain",
            "in": "query",
            "description": "Match only application domains with the given topic domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of application domains and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Application Domains"],
        "summary": "Creates an application domain object",
        "description": "To help keep your event-driven architecture organized, use application domains to create namespaces for your applications, events and schemas.",
        "operationId": "create_1",
        "requestBody": {
          "description": "Application domains have a name and topic domain.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. The newly saved application domain object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/virtualBrokers/{id}": {
      "get": {
        "tags": ["VirtualBrokers"],
        "summary": "Retrieves a Virtual Broker (Logical Event Mesh) object",
        "description": "Use this API to retrieve a single Virtual Broker by its ID.",
        "operationId": "get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Virtual Broker object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "If True, the topic nodes are retrieved.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Virtual Broker object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualBrokerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["VirtualBrokers"],
        "summary": "Deletes a Virtual Broker (Logical Event Mesh)",
        "description": "Use this API to delete a Virtual Broker object. The Virtual Broker must not contain any Topic Addresses otherwise it cannot be deleted.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Virtual Broker object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["VirtualBrokers"],
        "summary": "Updates a virtualBroker object",
        "description": "Use this API to update a virtualBroker. You only need to specify the fields that needs to be updated.",
        "operationId": "update_8",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the virtualBroker object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The virtualBroker object (only the description can be updated).",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/VirtualBroker"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated virtualBroker object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualBrokerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/schemas/{id}": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Retrieves a schema object",
        "description": "Use this API to retrieve a single schema by its ID.",
        "operationId": "get_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The list of fields to include. This must be a comma-separate list without spaces. The name 'latestContent' is an alias that will fetch the content field if the schema has no versions, otherwise it will contain the content of the latest version.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schema object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Schemas"],
        "summary": "Deletes a schema object",
        "description": "Use this API to delete a schema. The schema must not be in use by any events else it cannot be deleted.",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Schemas"],
        "summary": "Updates a schema object",
        "description": "Use this API to update a schema. You only need to specify the fields that need to be updated.",
        "operationId": "update_9",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The schema object. Either the schema content field or versions field may be set at one time, not both.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated schema object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/events/{id}": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieves an event object",
        "description": "Use this API to retrieve a single event by its ID.",
        "operationId": "get_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Deletes an event object",
        "description": "Use this API to delete an event. The event must not be in use by any applications else it cannot be deleted.",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Events"],
        "summary": "Updates an event object",
        "description": "Use this API to update an event. You only need to specify the fields that need to be updated.",
        "operationId": "update_10",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/enums/{id}": {
      "get": {
        "tags": ["Enums"],
        "summary": "Retrieves an enum object.",
        "description": "Use this API to retrieve a single enum by its ID.",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The enum object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EnumResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Enums"],
        "summary": "Deletes an enum object",
        "description": "Use this API to delete an enum.  To delete an enum, it must not be in use by any event's topic address.",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Enums"],
        "summary": "Updates an enum object.",
        "description": "Use this API to update an enum. You only need to specify the fields that need to be updated.",
        "operationId": "update_11",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The enum object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Enum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated enum object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EnumResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/applications/{id}": {
      "get": {
        "tags": ["Applications"],
        "summary": "Retrieves an application object",
        "description": "Use this API to retrieve a single application by its ID.",
        "operationId": "get_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The application object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Applications"],
        "summary": "Deletes an application object",
        "description": "Use this API to delete an application. If the application never existed or is already deleted, the operation will still be successful.",
        "operationId": "delete_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Schema application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Applications"],
        "summary": "Updates an application object",
        "description": "Use this API to update an application. You only need to specify the fields that need to be updated.",
        "operationId": "update_12",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The application object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated application object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/eventPortal/applicationDomains/{id}": {
      "get": {
        "tags": ["Application Domains"],
        "summary": "Retrieves an application domain object",
        "description": "Use this API to retrieve a single application domain by its ID.",
        "operationId": "get_6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application domain object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The application domain object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Application Domains"],
        "summary": "Deletes an application domain object",
        "description": "Use this API to delete an application domain. This action also deletes all applications, events, and schemas in the application domain. You cannot undo this operation.",
        "operationId": "delete_6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application domain object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Application Domains"],
        "summary": "Updates an application domain object",
        "description": "Use this API to update an application domain. You only need to specify the fields that need to be updated.",
        "operationId": "update_13",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application domain object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The application domain object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application domain object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/DomainImportViolation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DomainImportConflict": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "targetEntityId": {
            "type": "string"
          },
          "op": {
            "type": "string",
            "enum": ["create", "map", "merge", "import_into_domain"]
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "DomainImportViolation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "properties": {
              "conflicts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DomainImportConflict"
                }
              },
              "errorType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "An error occurred"
          },
          "errorId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "example": "'object': { 'field': 'description' }"
            },
            "example": "'object': { 'field': 'description' }"
          },
          "validationDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "example": "'name': ['Not unique']",
              "items": {
                "type": "string",
                "example": "'name': ['Not unique']"
              }
            },
            "example": "'name': ['Not unique']"
          },
          "errorType": {
            "type": "string",
            "writeOnly": true
          }
        },
        "discriminator": {
          "propertyName": "errorType"
        }
      },
      "Tag": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "maxLength": 25,
            "minLength": 1,
            "pattern": "^[^\\s][a-zA-Z0-9-,_\\s]*[^\\s]$",
            "type": "string",
            "example": "My First Tag"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TagResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Tag"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "IdsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Enum": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValue"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "EnumValue": {
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "value": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "LiteralTopicNodeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TopicNodeDTO"
          }
        ]
      },
      "TopicNodeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "consumable": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "displayName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "children": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TopicNodeDTO"
            }
          },
          "topicNodeType": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "topicNodeType"
        }
      },
      "VariableTopicNodeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TopicNodeDTO"
          },
          {
            "type": "object",
            "properties": {
              "enumId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "VirtualBroker": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "Animals"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Taxonomy of familiar animals such as dogs and cats."
          },
          "brokerType": {
            "type": "string",
            "example": "solace",
            "enum": ["unspecified", "solace", "kafka"]
          },
          "levelDelimiter": {
            "maxLength": 1,
            "type": "string",
            "example": "/"
          },
          "topicNodes": {
            "type": "array",
            "readOnly": true,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LiteralTopicNodeDTO"
                },
                {
                  "$ref": "#/components/schemas/VariableTopicNodeDTO"
                }
              ]
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "VirtualBrokerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VirtualBroker"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventSchema": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "My First Schema"
          },
          "shared": {
            "type": "boolean",
            "example": false
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Schema created by Solace PubSub+ Cloud API documentation"
          },
          "revisionComment": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "writeOnly": true,
            "example": "Changed schema name"
          },
          "contentType": {
            "type": "string",
            "example": "JSON",
            "enum": ["JSON", "AVRO", "XML", "Text", "Binary"]
          },
          "content": {
            "type": "string",
            "example": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\": \"An example schema\", \"required\": [ \"attribute\", ], \"properties\": { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"string\", \"title\": \"An example of a string based attribute\", \"examples\": [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
          },
          "latestContent": {
            "type": "string",
            "example": "(See the example of the content field.)"
          },
          "eventIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true
            }
          },
          "applicationDomainId": {
            "type": "string",
            "example": "12345678"
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "versionOps": {
            "type": "array",
            "writeOnly": true,
            "example": [
              {
                "op": "create",
                "value": {
                  "name": "v4",
                  "versionNumber": "4.0.0",
                  "content": ""
                }
              },
              {
                "op": "update",
                "id": "crukot0cpr",
                "value": {
                  "name": "green",
                  "versionNumber": "5",
                  "content": ""
                }
              },
              {
                "op": "remove",
                "id": "crukot0cph"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SchemaVersionPatch"
            }
          },
          "versions": {
            "type": "array",
            "example": [
              {
                "content": "",
                "name": "v1",
                "versionNumber": "1.0.0"
              },
              {
                "content": "",
                "name": "v2",
                "versionNumber": "2.0.0"
              },
              {
                "content": "",
                "name": "v3",
                "versionNumber": "3.0.0"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SchemaVersion"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SchemaVersion": {
        "required": ["name", "versionNumber"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "schemaId": {
            "type": "string",
            "example": "12345678"
          },
          "name": {
            "type": "string",
            "example": "v1"
          },
          "versionNumber": {
            "pattern": "^\\d+\\.\\d+\\.\\d+$|^\\d+$",
            "type": "string",
            "example": "1.0.0"
          },
          "content": {
            "type": "string",
            "example": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\": \"An example schema\", \"required\": [ \"attribute\", ], \"properties\": { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"string\", \"title\": \"An example of a string based attribute\", \"examples\": [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
          },
          "schemaRegistryId": {
            "type": "string",
            "example": "12345678"
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        },
        "example": [
          {
            "content": "",
            "name": "v1",
            "versionNumber": "1.0.0"
          },
          {
            "content": "",
            "name": "v2",
            "versionNumber": "2.0.0"
          },
          {
            "content": "",
            "name": "v3",
            "versionNumber": "3.0.0"
          }
        ]
      },
      "SchemaVersionPatch": {
        "required": ["op"],
        "type": "object",
        "properties": {
          "op": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/SchemaVersion"
          }
        },
        "writeOnly": true,
        "example": [
          {
            "op": "create",
            "value": {
              "name": "v4",
              "versionNumber": "4.0.0",
              "content": ""
            }
          },
          {
            "op": "update",
            "id": "crukot0cpr",
            "value": {
              "name": "green",
              "versionNumber": "5",
              "content": ""
            }
          },
          {
            "op": "remove",
            "id": "crukot0cph"
          }
        ]
      },
      "SchemaResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventSchema"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "123456789"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "version": {
            "type": "string",
            "readOnly": true,
            "example": "0.0.1"
          },
          "shared": {
            "type": "boolean"
          },
          "topicName": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "maxLength": 10000,
            "type": "string"
          },
          "schemaId": {
            "type": "string"
          },
          "schemaVersionId": {
            "type": "string"
          },
          "keySchemaId": {
            "type": "string"
          },
          "keySchemaVersionId": {
            "type": "string"
          },
          "applicationDomainId": {
            "type": "string"
          },
          "revisionComment": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "writeOnly": true,
            "example": "Changed event name"
          },
          "producedApplicationIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "enum": ["12345678", "23456789"]
            },
            "enum": ["12345678", "23456789"]
          },
          "consumedApplicationIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "enum": ["12345678", "23456789"]
            },
            "enum": ["12345678", "23456789"]
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "brokerType": {
            "type": "string",
            "readOnly": true,
            "enum": ["unspecified", "solace", "kafka"]
          },
          "keyPrimitivePayloadType": {
            "type": "string"
          },
          "valuePrimitivePayloadType": {
            "type": "string"
          },
          "topicAddress": {
            "$ref": "#/components/schemas/TopicAddress"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TopicAddress": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "virtualBrokerId": {
            "type": "string"
          },
          "topicAddressLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicNodeDTO"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Event"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EnumResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Enum"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Application": {
        "required": ["applicationDomainId", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "My First Application"
          },
          "version": {
            "type": "string",
            "readOnly": true,
            "example": "0.0.1"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Application created by Solace PubSub+ Cloud documentation"
          },
          "applicationDomainId": {
            "type": "string",
            "example": "12345678"
          },
          "revisionComment": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "writeOnly": true,
            "example": "Changed application name"
          },
          "producedEventIds": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["12345678", "23456789"]
            },
            "enum": ["12345678", "23456789"]
          },
          "consumedEventIds": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["12345678", "23456789"]
            },
            "enum": ["12345678", "23456789"]
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "enum": [12345678, 23456789]
          },
          "applicationClass": {
            "type": "string",
            "example": "solace",
            "deprecated": true,
            "enum": [
              "unspecified",
              "kafka_connector",
              "solace_connector",
              "kafka_application"
            ]
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointDTO"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "applicationClass"
        }
      },
      "EndpointDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "topicSubscriptions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "virtualBrokerId": {
            "type": "string"
          },
          "endpointType": {
            "type": "string",
            "enum": [
              "genericEndpoint",
              "kafkaConsumerGroup",
              "solaceQueueEndpoint",
              "solaceTopicEndpoint",
              "solaceClientEndpoint"
            ]
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "endpointType"
        }
      },
      "KafkaConnectorDTO": {
        "required": ["applicationDomainId", "connectorType", "name"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "connectorType": {
                "type": "string",
                "enum": ["source", "sink"]
              },
              "clusterId": {
                "maxLength": 255,
                "type": "string"
              },
              "connectorClass": {
                "maxLength": 255,
                "type": "string"
              },
              "configurationParameters": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "maximumTasks": {
                "maxLength": 1000,
                "minLength": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SolaceConnectorDTO": {
        "required": ["applicationDomainId", "connectorType", "name"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "connectorType": {
                "type": "string",
                "enum": ["source", "sink"]
              },
              "clusterId": {
                "maxLength": 255,
                "type": "string"
              },
              "connectorClass": {
                "maxLength": 255,
                "type": "string"
              },
              "configurationParameters": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "maximumTasks": {
                "maxLength": 1000,
                "minLength": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Application"
              },
              {
                "$ref": "#/components/schemas/KafkaConnectorDTO"
              },
              {
                "$ref": "#/components/schemas/SolaceConnectorDTO"
              }
            ]
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "GenerateAsyncAPIRequest": {
        "required": ["asyncApiVersion"],
        "type": "object",
        "properties": {
          "asyncApiVersion": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ApplicationDomain": {
        "required": ["enforceUniqueTopicNames"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1583706406
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "example": "My First Application Domain"
          },
          "topicDomain": {
            "maxLength": 250,
            "type": "string",
            "example": "com/solace"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Application Domain created by the Solace PubSub+ Cloud API documentation"
          },
          "enforceUniqueTopicNames": {
            "type": "boolean",
            "example": true
          },
          "schemas": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/EventSchema"
            }
          },
          "events": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "applications": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Application"
                },
                {
                  "$ref": "#/components/schemas/KafkaConnectorDTO"
                },
                {
                  "$ref": "#/components/schemas/SolaceConnectorDTO"
                }
              ]
            }
          },
          "schemaIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true
            }
          },
          "eventIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true
            }
          },
          "applicationIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true
            }
          },
          "stats": {
            "$ref": "#/components/schemas/ApplicationDomainStats"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ApplicationDomainStats": {
        "type": "object",
        "properties": {
          "schemaCount": {
            "type": "integer",
            "format": "int32"
          },
          "eventCount": {
            "type": "integer",
            "format": "int32"
          },
          "applicationCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "readOnly": true
      },
      "ApplicationDomainResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApplicationDomain"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "VirtualBrokersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VirtualBroker"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "TagsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SchemasResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSchema"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EnumsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Enum"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApplicationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Application"
                },
                {
                  "$ref": "#/components/schemas/KafkaConnectorDTO"
                },
                {
                  "$ref": "#/components/schemas/SolaceConnectorDTO"
                }
              ]
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApplicationDomainsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationDomain"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "APIToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
