{
  "openapi": "3.0.1",
  "info": { "title": "Event Portal - Runtime", "version": "2.0.15" },
  "servers": [
    {
      "url": "https://api.solace.cloud",
      "description": "Solace PubSub+ Cloud US EAST Region"
    },
    {
      "url": "https://api.solacecloud.com.au",
      "description": "Solace PubSub+ Cloud AUS Region"
    }
  ],
  "security": [{ "APIToken": [] }],
  "tags": [
    { "name": "Application Domains" },
    { "name": "Applications" },
    { "name": "Configuration Types" },
    { "name": "Consumers" },
    { "name": "Custom Attribute Definitions" },
    { "name": "Enums" },
    { "name": "Environments" },
    { "name": "Event API Products" },
    { "name": "Event APIs" },
    { "name": "Event Meshes" },
    { "name": "Events" },
    { "name": "Schemas" },
    { "name": "States" },
    { "name": "Topic Domains" }
  ],
  "paths": {
    "/api/v2/architecture/environments": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get a list of environments",
        "description": "Use this API to get a list of all environments.",
        "operationId": "getEnvironments",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of environments to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "like",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of environments and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/environments/{id}": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get an environment",
        "description": "Use this API to get a single environment by its ID.",
        "operationId": "getEnvironment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the environment.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The environment.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": { "$ref": "#/components/schemas/EnvironmentResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventManagementAgentRegions": {
      "get": {
        "tags": ["Event Management Agent Regions"],
        "summary": "(Beta) Get a list of event management agent regions",
        "description": "Use this API to get a list of event management agent regions.",
        "operationId": "getEventManagementAgentRegions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of event management agent regions to get per page.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of event management agent regions and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentRegionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventManagementAgents": {
      "get": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Get a list of EMAs",
        "description": "Use this API to get a list of EMAs that match the given parameters.",
        "operationId": "getEventManagementAgents",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of EMAs to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the EMAs.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "Match only EMAs created by this user",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "eventManagementAgentRegionId",
            "in": "query",
            "description": "Match only EMAs in the given EMA-Region",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Specify extra data to be included, options are: referencedByMessagingServiceIds",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of EMAs and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Create an EMA object",
        "description": "Use this API to create an EMA object.",
        "operationId": "createEventManagementAgent",
        "requestBody": {
          "description": "The EMA object.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EventManagementAgent" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an EMA. The newly saved EMA object is returned in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventManagementAgents/{id}": {
      "get": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Get an EMA object",
        "description": "Use this API to get a single EMA by its ID.",
        "operationId": "getEventManagementAgent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Specify extra data to be included, options are: referencedByMessagingServiceIds",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The EMA object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Delete an EMA object",
        "description": "Use this API to delete an EMA.",
        "operationId": "deleteEventManagementAgent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "No content is returned." },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Update an EMA object",
        "description": "Use this API to update an EMA. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventManagementAgent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object to update.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The EMA object.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EventManagementAgent" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated EMA object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventManagementAgents/{id}/configuration/raw": {
      "get": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Get the raw configs in string format for an EMA object",
        "description": "Use this API to get the raw configs for a single EMA by its ID.",
        "operationId": "getEventManagementAgentConfigRaw",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The EMA config in yaml structure.",
            "content": { "text/plain": { "schema": { "type": "string" } } }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventManagementAgents/{id}/configuration/file": {
      "get": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Get the raw configs in file format for an EMA object",
        "description": "Use this API to get the raw configs for a single EMA by its ID.",
        "operationId": "getEventManagementAgentConfigFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The EMA config in a yaml file named application.yml.",
            "content": {
              "application/octet-stream": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventMeshes": {
      "get": {
        "tags": ["Event Meshes"],
        "summary": "Get a list of event meshes",
        "description": "Use this API to get a list of event meshes that match the given parameters.",
        "operationId": "getEventMeshes",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of event meshes to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the event mesh to match on.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "environmentId",
            "in": "query",
            "description": "Match only event meshes in the given environment",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of event meshes and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": { "$ref": "#/components/schemas/EventMeshesResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event Meshes"],
        "summary": "Create an event mesh",
        "description": "Create an event mesh.",
        "operationId": "createEventMesh",
        "requestBody": {
          "description": "Event mesh.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": { "$ref": "#/components/schemas/EventMesh" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event mesh. The newly saved event mesh is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": { "$ref": "#/components/schemas/EventMeshResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventMeshes/{id}": {
      "get": {
        "tags": ["Event Meshes"],
        "summary": "Get an event mesh",
        "description": "Get a single event mesh by its ID.",
        "operationId": "getEventMesh",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event mesh.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The event mesh.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": { "$ref": "#/components/schemas/EventMeshResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event Meshes"],
        "summary": "Delete an event mesh",
        "description": "Use this API to delete an event mesh.",
        "operationId": "deleteEventMesh",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event mesh.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "No content is returned." },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event Meshes"],
        "summary": "Update an event mesh",
        "description": "Use this API to update an event mesh. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventMesh",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event mesh to update.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The event mesh.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": { "$ref": "#/components/schemas/EventMesh" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event mesh.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": { "$ref": "#/components/schemas/EventMeshResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServices": {
      "get": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Get a list of messaging services",
        "description": "Use this API to get a list of messaging services that match the given parameters.",
        "operationId": "getMessagingServices",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of messaging services to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the messaging services.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "messagingServiceType",
            "in": "query",
            "description": "Match only messaging services of the given type",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "runtimeAgentId",
            "in": "query",
            "description": "Match only messaging services in the given runtimeAgentId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "eventMeshId",
            "in": "query",
            "description": "Match only messaging services in the given eventMeshId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "eventManagementAgentId",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of messaging services and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Create a messaging service",
        "description": "Use this API to create a messaging service.",
        "operationId": "createMessagingService",
        "requestBody": {
          "description": "The messaging service.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MessagingService" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a messaging service. The newly saved messaging service is returned in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServices/{id}": {
      "get": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Get a messaging service",
        "description": "Use this API to get a single messaging service by its ID.",
        "operationId": "getMessagingService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The messaging service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Delete a messaging service",
        "description": "Use this API to delete a messaging service.",
        "operationId": "deleteMessagingService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "No content is returned." },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Update a messaging service",
        "description": "Use this API to update a messaging service. You only need to specify the fields that need to be updated. However, if you want to update anything under subObjects (i.e. anything inside messagingServiceConnections object), you need to provide the original messagingServiceConnections with the updated fields instead of just providing the changed fields.",
        "operationId": "updateMessagingService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service to update.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The messaging service.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MessagingService" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated messaging service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServices/{messagingServiceId}/scanStart": {
      "put": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Initiate a scan request to run against a messaging service",
        "description": "Use this API to make a scan request on a messaging service.",
        "operationId": "scanStartMessagingService",
        "parameters": [
          {
            "name": "messagingServiceId",
            "in": "path",
            "description": "The ID of the messaging service.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The messaging service.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingServiceOperation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Requested a scan on the messaging service. The operation object with ID set as ID of the created scan Object is returned in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServices/{id}/removeAssociation": {
      "put": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Remove an association between an messaging service and the requested entity",
        "description": "Use this API to remove the association between a messaging service and either of EVENT_MESH or EVENT_MANAGEMENT_AGENT.",
        "operationId": "removeAssociationMessagingService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The association object with the value matching either EVENT_MESH or EVENT_MANAGEMENT_AGENT.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingServiceRemoveAssociation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated messaging service, e.g. if the API request body had {\"association\": \"EVENT_MESH\"} then the resulting object would not have eventMeshId attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServiceScans": {
      "get": {
        "tags": ["Messaging Service Scans"],
        "summary": "(Beta) Get a list of messaging service scans",
        "description": "Use this API to get a list of messaging service scans that match the given parameters.",
        "operationId": "getMessagingServiceScans",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of messaging service scans to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the messaging service scans.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "messagingServiceId",
            "in": "query",
            "description": "Match only messaging service scans in the given messagingService",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "eventMeshId",
            "in": "query",
            "description": "Match only messaging service scans in the given eventMeshId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of messaging service scans and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScansResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServiceScans/{id}": {
      "get": {
        "tags": ["Messaging Service Scans"],
        "summary": "(Beta) Get a messaging service scan",
        "description": "Use this API to get a single messaging service scan by its ID.",
        "operationId": "getMessagingServiceScan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service scan.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The messaging service scan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScanResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Messaging Service Scans"],
        "summary": "(Beta) Delete a messaging service scan",
        "description": "Use this API to delete a messaging service scan.",
        "operationId": "deleteMessagingServiceScan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service scan.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "No content is returned." },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServiceScans/{scanId}/logs": {
      "get": {
        "tags": ["Messaging Service Scan Logs"],
        "summary": "(Beta) Get a list of messaging service scan logs",
        "description": "Use this API to get a list of messaging service scan logs that match the given parameters.",
        "operationId": "getMessagingServiceScansLogs",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "The ID of the messaging service scan we want logs for.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of messaging service scan logs to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of messaging service scan logs and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScanLogListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServiceScans/{scanId}/dataCollection": {
      "get": {
        "tags": ["Messaging Service Scan Data"],
        "summary": "(Beta) Get a list of messaging service scan data",
        "description": "Use this API to get a list of messaging service scan data that match the given parameters.",
        "operationId": "getMessagingServiceScansData",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "The ID of the messaging service scan we want data for.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of messaging service scan data to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The name of the field to sort on.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the messaging service scan data.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "collectionTypes",
            "in": "query",
            "description": "Match only scan data whose dataCollectionType matches the given list.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": { "type": "string" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of messaging service scan data and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScanDataListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServiceScans/{scanId}/dataCollection/{id}": {
      "get": {
        "tags": ["Messaging Service Scan Data"],
        "summary": "(Beta) Get a messaging service scan data",
        "description": "Use this API to get a single messaging service scan data by its ID.",
        "operationId": "getMessagingServiceScanData",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "The ID of the messaging service scan.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service scan data.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The messaging service scan data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScanDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ErrorResponse" },
                    { "$ref": "#/components/schemas/InvalidStateReference" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "required": ["addressLevels"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "addressLevels": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressLevel" }
          },
          "addressType": { "type": "string", "enum": ["topic"] },
          "id": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "AddressLevel": {
        "required": ["addressLevelType", "name"],
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "root" },
          "addressLevelType": {
            "type": "string",
            "enum": ["literal", "variable"]
          },
          "enumVersionId": { "type": "string" }
        }
      },
      "AddressSpace": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string", "readOnly": true, "example": "123456" },
          "brokerType": { "type": "string", "example": "kafka" },
          "delimiter": { "type": "string", "example": "_" },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "AddressSpaceResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/AddressSpace" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "AddressSpacesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressSpace" }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "Application": {
        "required": [
          "applicationDomainId",
          "applicationType",
          "brokerType",
          "name"
        ],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "example": "My First Application"
          },
          "applicationType": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "standard"
          },
          "brokerType": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "solace",
            "enum": ["kafka", "solace"]
          },
          "applicationDomainId": { "type": "string", "example": "acb2j5k3mly" },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "type": { "type": "string" }
        }
      },
      "ApplicationDomain": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string", "readOnly": true, "example": "12345678" },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "My First Application Domain"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Application Domain created by the Solace PubSub+ Cloud API documentation"
          },
          "uniqueTopicAddressEnforcementEnabled": {
            "type": "boolean",
            "description": "Forces all topic addresses within the application domain to be unique.",
            "example": true
          },
          "topicDomainEnforcementEnabled": {
            "type": "boolean",
            "description": "Forces all topic addresses within the application domain to be prefixed with one of the application domain’s configured topic domains.",
            "example": false
          },
          "stats": { "$ref": "#/components/schemas/ApplicationDomainStats" },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "type": { "type": "string" }
        }
      },
      "ApplicationDomainExportDTO": {
        "type": "object",
        "properties": {
          "formatVersion": { "type": "string" },
          "applicationDomains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationDomain" }
          },
          "topicDomains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicDomain" }
          },
          "applications": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Application" }
          },
          "applicationVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationVersion" }
          },
          "events": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Event" }
          },
          "eventVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventVersion" }
          },
          "schemas": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SchemaObject" }
          },
          "schemaVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SchemaVersion" }
          },
          "enums": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicAddressEnum" }
          },
          "enumVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicAddressEnumVersion" }
          },
          "eventApis": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApi" }
          },
          "eventApiVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiVersion" }
          },
          "eventApiProducts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiProduct" }
          },
          "eventApiProductVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiProductVersion" }
          },
          "addressSpaces": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressSpace" }
          },
          "customAttributeDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeDefinition"
            }
          }
        }
      },
      "ApplicationDomainImportDTO": {
        "type": "object",
        "properties": {
          "formatVersion": { "type": "string" },
          "applicationDomains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationDomain" }
          },
          "topicDomains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicDomain" }
          },
          "applications": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Application" }
          },
          "applicationVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationVersion" }
          },
          "events": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Event" }
          },
          "eventVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventVersion" }
          },
          "schemas": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SchemaObject" }
          },
          "schemaVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SchemaVersion" }
          },
          "enums": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicAddressEnum" }
          },
          "enumVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicAddressEnumVersion" }
          },
          "eventApis": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApi" }
          },
          "eventApiVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiVersion" }
          },
          "eventApiProducts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiProduct" }
          },
          "eventApiProductVersions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiProductVersion" }
          },
          "addressSpaces": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressSpace" }
          },
          "customAttributeDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeDefinition"
            }
          }
        }
      },
      "ApplicationDomainResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/ApplicationDomain" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ApplicationDomainStats": {
        "type": "object",
        "properties": {
          "schemaCount": { "type": "integer", "format": "int32" },
          "eventCount": { "type": "integer", "format": "int32" },
          "applicationCount": { "type": "integer", "format": "int32" },
          "enumCount": { "type": "integer", "format": "int32" },
          "eventApiCount": { "type": "integer", "format": "int32" },
          "eventApiProductCount": { "type": "integer", "format": "int32" }
        },
        "readOnly": true
      },
      "ApplicationDomainsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationDomain" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "ApplicationRegistration": {
        "required": ["applicationDomainId", "name", "registrationId"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "applicationDomainId": { "type": "string", "example": "12345678" },
          "registrationId": { "type": "string", "example": "12345678" },
          "applicationId": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "example": "My First Application Registration"
          },
          "type": { "type": "string", "readOnly": true },
          "customAttributes": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          }
        }
      },
      "ApplicationRegistrationResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/ApplicationRegistration" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ApplicationRegistrationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationRegistration" }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/Application" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ApplicationVersion": {
        "required": ["applicationId", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "applicationId": { "type": "string", "example": "acb2j5k3mly" },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Application created by Solace PubSub+ Cloud documentation"
          },
          "version": { "type": "string", "example": "1.0.0" },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "declaredProducedEventVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredConsumedEventVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredEventApiProductVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "stateId": { "type": "string", "readOnly": true, "example": "1" },
          "eventMeshIds": {
            "type": "array",
            "description": "*Deprecation Date: 2022-12-01<br>Removal Date: 2023-12-01<br>Reason: Application versions must now be <a href=\"/cloud/reference/updateMessagingServiceAssociationForApplicationVersions\">associated to messaging services</a> instead of modeled event meshes.*<br>",
            "deprecated": true,
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "consumers": {
            "type": "array",
            "readOnly": true,
            "items": { "$ref": "#/components/schemas/Consumer" }
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "messagingServiceIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "type": { "type": "string" }
        }
      },
      "ApplicationVersionResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/ApplicationVersion" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ApplicationVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationVersion" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "ApplicationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Application" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "AssociatedEntity": {
        "type": "object",
        "properties": {
          "entityType": { "type": "string" },
          "applicationDomainIds": {
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "AttractedEventVersionTuple": {
        "type": "object",
        "properties": {
          "eventVersionId": { "type": "string" },
          "eventMeshIds": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "readOnly": true
      },
      "AttractingApplicationVersionTuple": {
        "type": "object",
        "properties": {
          "applicationVersionId": { "type": "string" },
          "eventMeshIds": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "readOnly": true
      },
      "Audit": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string", "readOnly": true, "example": "12345678" },
          "messagingServiceId": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "auditEntityType": {
            "type": "string",
            "readOnly": true,
            "example": "solaceQueue"
          },
          "messagingServiceName": {
            "type": "string",
            "readOnly": true,
            "example": "My Solace Service"
          },
          "identifier": {
            "type": "string",
            "readOnly": true,
            "example": "orderEventQueue"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "example": "partialMatch"
          },
          "multipleParent": {
            "type": "boolean",
            "readOnly": true,
            "example": false
          },
          "designerMappingId": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "runtimeMappingId": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "designerMapping": {
            "$ref": "#/components/schemas/DesignerMappingDTO"
          },
          "runtimeMapping": {
            "$ref": "#/components/schemas/RuntimeMappingDTO"
          },
          "associatedTags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Tag" }
          },
          "type": { "type": "string" }
        },
        "readOnly": true
      },
      "AuditCommandDTO": {
        "type": "object",
        "properties": {
          "auditOperationType": {
            "type": "string",
            "enum": [
              "audit",
              "deleteAll",
              "designerMapping",
              "designerUpdate",
              "runtimeMapping",
              "runtimeUpdate"
            ]
          },
          "auditEntityType": {
            "type": "string",
            "enum": [
              "all",
              "kafkaConsumerGroup",
              "kafkaTopic",
              "solaceQueue",
              "solaceTopic"
            ]
          },
          "sourceId": { "type": "string" },
          "synchronous": { "type": "boolean" }
        }
      },
      "AuditDetail": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string", "readOnly": true, "example": "12345678" },
          "runtimeAttributes": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "designerAttributes": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "parentId": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "versionId": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "entityId": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "scanId": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "example": "partialMatch"
          },
          "identifier": {
            "type": "string",
            "readOnly": true,
            "example": "orderEventQueue"
          },
          "associatedTags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Tag" }
          },
          "type": { "type": "string" }
        }
      },
      "AuditDetailResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/AuditDetail" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "AuditImportDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "auditIds": { "type": "array", "items": { "type": "string" } },
          "properties": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "auditImportAction": {
            "type": "string",
            "enum": [
              "updateExistingParent",
              "updateExistingVersion",
              "createNewParent",
              "createNewVersion"
            ]
          },
          "audits": {
            "type": "array",
            "readOnly": true,
            "items": { "$ref": "#/components/schemas/Audit" }
          },
          "id": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "AuditImportJobMetadata": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "jobId": { "type": "string" },
          "jobType": { "type": "string" },
          "status": {
            "type": "string",
            "enum": ["in_progress", "error", "validation_error", "success"]
          },
          "messagingServiceId": { "type": "string" },
          "payload": { "$ref": "#/components/schemas/BulkAuditImportDTO" },
          "id": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "AuditImportJobsMetadataResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AuditImportJobMetadata" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "AuditsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Audit" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "BaseMessagingServiceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID value of the object",
            "readOnly": true,
            "example": "123456"
          },
          "messagingServiceId": {
            "type": "string",
            "description": "ID of the Event Portal messaging service",
            "readOnly": true,
            "example": "456789"
          },
          "messagingServiceName": {
            "type": "string",
            "description": "Name of the Event Portal messaging service",
            "readOnly": true,
            "example": "Messaging Service"
          },
          "supportedProtocols": {
            "type": "array",
            "description": "Values for allowed supported protocols",
            "items": {
              "type": "string",
              "description": "Values for allowed supported protocols"
            }
          },
          "environmentId": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "environmentName": {
            "type": "string",
            "readOnly": true,
            "example": "Production"
          },
          "eventMeshId": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2y"
          },
          "eventMeshName": {
            "type": "string",
            "readOnly": true,
            "example": "US East Mesh"
          },
          "type": { "type": "string" }
        },
        "discriminator": { "propertyName": "type" }
      },
      "BasePolicyDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID value of the object",
            "readOnly": true,
            "example": "123456"
          },
          "type": { "type": "string" }
        },
        "discriminator": { "propertyName": "type" }
      },
      "BulkAuditImportDTO": {
        "type": "object",
        "properties": {
          "auditImports": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AuditImportDTO" }
          }
        }
      },
      "Configuration": {
        "required": [
          "configurationTypeId",
          "entityId",
          "entityType",
          "messagingServiceId"
        ],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "messagingServiceId": { "type": "string", "example": "acb2j5k3mly" },
          "configurationTypeId": {
            "type": "string",
            "description": "Refer <a href=\"./cloud/reference/getConfigurationTypes\">here</a> for details on configuration types.",
            "example": "v0u717y2oiy"
          },
          "entityType": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "consumer",
            "enum": ["applicationVersion", "consumer", "eventVersion"]
          },
          "entityId": { "type": "string", "example": "acb2j5k3mly" },
          "value": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          },
          "type": { "type": "string" }
        }
      },
      "ConfigurationResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/Configuration" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ConfigurationType": {
        "required": ["brokerType", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "solaceQueue"
          },
          "brokerType": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "solace"
          },
          "associatedEntityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
            }
          },
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "valueSchema": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          },
          "type": { "type": "string" }
        }
      },
      "ConfigurationTypeResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/ConfigurationType" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ConfigurationTypesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConfigurationType" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "ConfigurationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Configuration" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "Consumer": {
        "required": ["applicationVersionId"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "My First Consumer"
          },
          "applicationVersionId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "brokerType": { "type": "string", "example": "solace" },
          "consumerType": { "type": "string", "example": "eventQueue" },
          "subscriptions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Subscription" }
          },
          "type": { "type": "string" }
        },
        "readOnly": true
      },
      "ConsumerResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/Consumer" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ConsumersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Consumer" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "CustomAttribute": {
        "type": "object",
        "properties": {
          "customAttributeDefinitionId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "customAttributeDefinitionName": {
            "pattern": "a-zA-Z0-9_\\-\\.",
            "type": "string",
            "example": "color"
          },
          "value": {
            "pattern": "a-zA-Z0-9_\\-\\.",
            "type": "string",
            "example": "red"
          }
        }
      },
      "CustomAttributeDefinition": {
        "required": ["scope"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string" },
          "name": {
            "pattern": "[a-zA-Z0-9\\._-]+",
            "type": "string",
            "example": "colour"
          },
          "valueType": { "type": "string", "enum": ["STRING", "LONG_TEXT"] },
          "scope": {
            "type": "string",
            "enum": ["organization", "applicationDomain"]
          },
          "associatedEntityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"event\",\"application\"]"
            }
          },
          "associatedEntities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AssociatedEntity" }
          },
          "type": { "type": "string" }
        }
      },
      "CustomAttributeDefinitionResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/CustomAttributeDefinition" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "CustomAttributeDefinitionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeDefinition"
            }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "CustomAttributeFrontEndDTO": {
        "required": ["scope"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string" },
          "name": {
            "pattern": "[a-zA-Z0-9\\._-]+",
            "type": "string",
            "example": "colour"
          },
          "valueType": { "type": "string", "enum": ["STRING", "LONG_TEXT"] },
          "scope": {
            "type": "string",
            "enum": ["organization", "applicationDomain"]
          },
          "associatedEntityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"event\",\"application\"]"
            }
          },
          "associatedEntities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AssociatedEntity" }
          },
          "valuesEntityTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "values": { "type": "array", "items": { "type": "object" } },
          "type": { "type": "string" }
        }
      },
      "CustomAttributesFrontEndResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeFrontEndDTO"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "DeliveryDescriptor": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "brokerType": { "type": "string" },
          "address": { "$ref": "#/components/schemas/Address" },
          "keySchemaVersionId": { "type": "string", "example": "shb3mlyec2g" },
          "keySchemaPrimitiveType": {
            "type": "string",
            "example": "BYTES",
            "enum": [
              "BOOLEAN",
              "BYTES",
              "DOUBLE",
              "FLOAT",
              "INT",
              "LONG",
              "NULL",
              "NUMBER",
              "STRING"
            ]
          },
          "id": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "DesignerMappingDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "messagingServiceId": { "type": "string" },
          "auditEntityType": {
            "type": "string",
            "enum": [
              "all",
              "kafkaConsumerGroup",
              "kafkaTopic",
              "solaceQueue",
              "solaceTopic"
            ]
          },
          "identifier": { "type": "string" },
          "attributes": { "type": "string" },
          "entityId": { "type": "string" },
          "versionId": { "type": "string" },
          "parentId": { "type": "string" }
        },
        "readOnly": true
      },
      "EPResponseSetString": {
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EntityType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "readOnly": true,
            "example": "consumer"
          },
          "type": { "type": "string" }
        }
      },
      "EntityTypesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EntityType" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "Environment": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string", "readOnly": true, "example": "xyz123abc" },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "example": "Staging environment"
          },
          "description": {
            "maxLength": 10000,
            "minLength": 1,
            "type": "string",
            "example": "The description of my environment"
          },
          "revision": { "type": "integer", "format": "int32" },
          "numberOfEventMeshes": { "type": "integer", "format": "int32" },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "EnvironmentResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/Environment" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EnvironmentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Environment" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "An error occurred" },
          "errorId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "example": "'object': { 'field': 'description' }"
            },
            "example": "'object': { 'field': 'description' }"
          },
          "validationDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "example": "'name': ['Not unique']",
              "items": { "type": "string", "example": "'name': ['Not unique']" }
            },
            "example": "'name': ['Not unique']"
          },
          "errorType": { "type": "string", "writeOnly": true }
        },
        "discriminator": { "propertyName": "errorType" }
      },
      "Event": {
        "required": ["applicationDomainId", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "example": "My First Event"
          },
          "shared": { "type": "boolean", "example": false },
          "applicationDomainId": { "type": "string", "example": "acb2j5k3mly" },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "EventApi": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "description": "The name of the event api.",
            "example": "Apitest"
          },
          "shared": { "type": "boolean", "example": true },
          "applicationDomainId": { "type": "string", "example": "acb2j5k3mly" },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "brokerType": {
            "type": "string",
            "description": "The type of the broker used for the event API",
            "enum": ["kafka", "solace"],
            "default": "solace"
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "type": {
            "type": "string",
            "description": "The type of this payload, eventApi.",
            "readOnly": true
          }
        }
      },
      "EventApiProduct": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server",
            "readOnly": true,
            "example": "12345"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "description": "The name of the event API product",
            "example": "EventApiProductTest"
          },
          "applicationDomainId": {
            "type": "string",
            "example": "abcappdomainid"
          },
          "shared": { "type": "boolean", "example": true },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "brokerType": {
            "type": "string",
            "description": "The type of the broker used for the event API product",
            "enum": ["kafka", "solace"],
            "default": "solace"
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "type": {
            "type": "string",
            "description": "The type of payload",
            "readOnly": true
          }
        }
      },
      "EventApiProductRegistration": {
        "required": [
          "accessRequestId",
          "applicationDomainId",
          "eventApiProductVersionId",
          "planId",
          "registrationId"
        ],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "applicationDomainId": { "type": "string", "example": "12345678" },
          "registrationId": { "type": "string", "example": "12345678" },
          "accessRequestId": { "type": "string", "example": "12345678" },
          "eventApiProductVersionId": {
            "type": "string",
            "example": "12345678"
          },
          "planId": { "type": "string", "example": "12345678" },
          "state": {
            "type": "string",
            "enum": [
              "Pending Approval",
              "Rejected",
              "Revoked",
              "Approved",
              "Error",
              "Live"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of payload",
            "readOnly": true,
            "default": "eventApiProductRegistration"
          },
          "customAttributes": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          }
        }
      },
      "EventApiProductRegistrationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventApiProductRegistration"
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventApiProductRegistrationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiProductRegistration"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventApiProductResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/EventApiProduct" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventApiProductVersion": {
        "required": ["eventApiProductId"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "eventApiProductId": { "type": "string", "example": "acb2j5k3mly" },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Event API product created by Solace PubSub+ Cloud documentation"
          },
          "version": { "type": "string", "example": "1.0.0" },
          "summary": {
            "type": "string",
            "example": "Summary string value of event API product version"
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Event API product version display name"
          },
          "eventApiVersionIds": {
            "type": "array",
            "description": "List of IDs of associated event API versions",
            "items": {
              "type": "string",
              "description": "List of IDs of associated event API versions"
            }
          },
          "stateId": { "type": "string", "example": "1" },
          "eventApiProductRegistrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiProductRegistration"
            }
          },
          "plans": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Plan" }
          },
          "solaceMessagingServices": {
            "type": "array",
            "description": "Solace Messaging Services",
            "items": { "$ref": "#/components/schemas/SolaceMessagingService" }
          },
          "filters": {
            "type": "array",
            "description": "List of filters that contains eventVersionId name and variables",
            "items": { "$ref": "#/components/schemas/Filter" }
          },
          "approvalType": {
            "type": "string",
            "description": "Approval type",
            "enum": ["automatic", "manual", "automatic", "manual"],
            "default": "automatic"
          },
          "publishState": {
            "type": "string",
            "description": "Publish state",
            "enum": ["unset", "published", "published", "unset"],
            "default": "unset"
          },
          "publishedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "type": {
            "type": "string",
            "description": "The type of payload",
            "readOnly": true
          }
        }
      },
      "EventApiProductVersionResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/EventApiProductVersion" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventApiProductVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiProductVersion" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventApiProductsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiProduct" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventApiResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/EventApi" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventApiVersion": {
        "required": ["eventApiId"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "eventApiId": { "type": "string", "example": "acb2j5k3mly" },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Event Api created by Solace PubSub+ Cloud documentation"
          },
          "version": { "type": "string", "example": "1.0.0" },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the eventApi version"
          },
          "producedEventVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "consumedEventVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredEventApiProductVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "stateId": { "type": "string", "example": "1" },
          "type": { "type": "string" }
        }
      },
      "EventApiVersionResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/EventApiVersion" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventApiVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApiVersion" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventApisResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventApi" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventManagementAgent": {
        "required": ["eventManagementAgentRegionId", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "sdagkjlh32x"
          },
          "name": {
            "type": "string",
            "description": "The name of the EMA.",
            "example": "primary event management agent"
          },
          "region": {
            "type": "string",
            "description": "The region in which the EMA belongs to, extracted from the EventManagementAgentRegion.",
            "readOnly": true,
            "example": "North America"
          },
          "clientUsername": {
            "type": "string",
            "description": "The SMF username for a customer's EMA to use to communicate to event-portal.",
            "readOnly": true,
            "example": "sadhkjl2325sak"
          },
          "clientPassword": {
            "type": "string",
            "description": "The SMF password for a customer's EMA to use to communicate to event-portal.",
            "readOnly": true,
            "example": "SomePassword"
          },
          "referencedByMessagingServiceIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "The list of messagingServiceIds user provides in GET APIs to filter the results.",
              "readOnly": true,
              "example": "[\"1kjdsf32\",\"9875ksdf\"]"
            }
          },
          "orgId": {
            "type": "string",
            "description": "Used by admin APIs to get a list of EMAs against the given orgId",
            "readOnly": true,
            "example": "897xd32"
          },
          "status": {
            "type": "string",
            "description": "The connection status of EP to the actual EMA which this object represents.",
            "readOnly": true,
            "example": "Connected"
          },
          "eventManagementAgentRegionId": {
            "type": "string",
            "description": "The ID of the associated EventManagementAgentRegion.",
            "example": "sdfkjh3242ds"
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "EventManagementAgentRegion": {
        "required": [
          "cloudProvider",
          "host",
          "msgVpn",
          "name",
          "region",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "serviceId": {
            "type": "string",
            "description": "The id of the service from maas-core.",
            "example": "67890x23vh"
          },
          "name": {
            "type": "string",
            "description": "The name of the EventManagementAgentRegion.",
            "example": "primary region"
          },
          "cloudProvider": {
            "type": "string",
            "description": "The name of the cloud provider.",
            "example": "AWS"
          },
          "region": {
            "type": "string",
            "description": "The name of the region.",
            "example": "us-east"
          },
          "host": {
            "type": "string",
            "description": "The host name of the region.",
            "example": "mr-connection-sdtwexd.messaging.solace.cloud"
          },
          "msgVpn": {
            "type": "string",
            "description": "The name of the region's msgVpn.",
            "example": "fooivmr1"
          },
          "port": {
            "type": "integer",
            "description": "The SMF port number.",
            "format": "int32",
            "example": 55443
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "updatedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          }
        }
      },
      "EventManagementAgentRegionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventManagementAgentRegion"
            }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventManagementAgentResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/EventManagementAgent" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventManagementAgentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventManagementAgent" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventMesh": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The name of the event mesh.",
            "example": "Inventory"
          },
          "environmentId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The environmentId of the Event Mesh",
            "example": "67890"
          },
          "description": {
            "maxLength": 10000,
            "minLength": 1,
            "type": "string",
            "description": "The description of the event mesh.",
            "example": "The Inventory Event Meshapplications."
          },
          "brokerType": {
            "type": "string",
            "description": "The type of the broker used in the event mesh.",
            "enum": ["kafka", "solace"]
          },
          "applicationVersionIds": {
            "type": "array",
            "description": "*Deprecation Date: 2022-12-01<br>Removal Date: 2023-12-01<br>Reason: Application versions must now be <a href=\"/cloud/reference/updateMessagingServiceAssociationForApplicationVersions\">associated to messaging services</a> instead of modeled event meshes.*<br>",
            "deprecated": true,
            "items": { "type": "string" }
          },
          "type": {
            "type": "string",
            "description": "The type of this payload, eventMesh.",
            "readOnly": true
          }
        }
      },
      "EventMeshFrontEndDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "environmentName": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "environmentId": { "type": "string" },
          "description": { "type": "string" },
          "brokerType": { "type": "string" },
          "applicationVersionIds": {
            "type": "array",
            "items": { "type": "string" }
          },
          "referencedByMessagingServiceIds": {
            "type": "array",
            "items": { "type": "string" }
          },
          "type": { "type": "string" }
        }
      },
      "EventMeshFrontEndResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/EventMeshFrontEndDTO" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventMeshResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/EventMesh" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventMeshesFrontEndResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventMeshFrontEndDTO" }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventMeshesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventMesh" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/Event" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventVersion": {
        "required": ["eventId", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "eventId": { "type": "string", "example": "acb2j5k3mly" },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Event version created by Solace PubSub+ Cloud documentation"
          },
          "version": { "type": "string", "example": "1.0.0" },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "declaredProducingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredConsumingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "producingEventApiVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "consumingEventApiVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "attractingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AttractingApplicationVersionTuple"
            }
          },
          "schemaVersionId": { "type": "string", "example": "shb3mlyec2g" },
          "schemaPrimitiveType": {
            "type": "string",
            "example": "BYTES",
            "enum": [
              "BOOLEAN",
              "BYTES",
              "DOUBLE",
              "FLOAT",
              "INT",
              "LONG",
              "NULL",
              "NUMBER",
              "STRING"
            ]
          },
          "deliveryDescriptor": {
            "$ref": "#/components/schemas/DeliveryDescriptor"
          },
          "stateId": { "type": "string", "readOnly": true, "example": "1" },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "messagingServiceIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "type": { "type": "string" }
        }
      },
      "EventVersionFrontend": {
        "required": ["eventId", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "eventId": { "type": "string", "example": "acb2j5k3mly" },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Event version created by Solace PubSub+ Cloud documentation"
          },
          "version": { "type": "string", "example": "1.0.0" },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "declaredProducingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredConsumingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "producingEventApiVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "consumingEventApiVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "attractingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AttractingApplicationVersionTuple"
            }
          },
          "schemaVersionId": { "type": "string", "example": "shb3mlyec2g" },
          "schemaPrimitiveType": {
            "type": "string",
            "example": "BYTES",
            "enum": [
              "BOOLEAN",
              "BYTES",
              "DOUBLE",
              "FLOAT",
              "INT",
              "LONG",
              "NULL",
              "NUMBER",
              "STRING"
            ]
          },
          "deliveryDescriptor": {
            "$ref": "#/components/schemas/DeliveryDescriptor"
          },
          "stateId": { "type": "string", "readOnly": true, "example": "1" },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "messagingServiceIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredProducingApplicationVersionIdsInEventMesh": {
            "type": "array",
            "items": { "type": "string" }
          },
          "declaredConsumingApplicationVersionIdsInEventMesh": {
            "type": "array",
            "items": { "type": "string" }
          },
          "type": { "type": "string" }
        }
      },
      "EventVersionResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/EventVersion" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "EventVersionsFrontendResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventVersionFrontend" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventVersion" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "EventsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Event" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "eventVersionId": { "type": "string", "example": "123456" },
          "topicFilters": {
            "type": "array",
            "description": "List of variable that contains address node name and filters",
            "items": { "$ref": "#/components/schemas/TopicFilter" }
          },
          "id": { "type": "string" },
          "type": {
            "type": "string",
            "description": "The type of payload",
            "readOnly": true,
            "default": "filter"
          }
        },
        "description": "List of filters that contains eventVersionId name and variables"
      },
      "GatewayMessagingService": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string" },
          "messagingServiceId": { "type": "string" },
          "eventApiProductVersionId": { "type": "string" },
          "supportedProtocols": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "smfc",
                "smf",
                "smfs",
                "amqp",
                "amqps",
                "mqtt",
                "mqtts",
                "mqttws",
                "mqttwss",
                "SECUREMQTT",
                "SECUREMQTTWS",
                "rest",
                "rests"
              ]
            }
          },
          "type": { "type": "string" }
        }
      },
      "GatewayMessagingServiceResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/GatewayMessagingService" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "GraphEdgeDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string" },
          "sourceId": { "type": "string" },
          "destinationId": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "GraphModelDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string" },
          "orgId": { "type": "string" },
          "name": { "type": "string" },
          "graphType": { "type": "string" },
          "context": { "type": "string" },
          "contextId": { "type": "string" },
          "nodes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GraphNodeWrapperDTO" }
          },
          "type": { "type": "string" }
        }
      },
      "GraphModelResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/GraphModelDTO" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "GraphModelsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GraphModelDTO" }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "GraphNodeDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string" },
          "graphModelId": { "type": "string" },
          "displayName": { "type": "string" },
          "position": { "$ref": "#/components/schemas/GraphNodePosition" },
          "nodeType": { "type": "string" },
          "references": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GraphNodeReferenceDTO" }
          },
          "type": { "type": "string" }
        }
      },
      "GraphNodePosition": {
        "type": "object",
        "properties": {
          "xcoordinate": { "type": "number", "format": "double" },
          "ycoordinate": { "type": "number", "format": "double" }
        }
      },
      "GraphNodeReferenceDTO": {
        "type": "object",
        "properties": {
          "referenceId": { "type": "string" },
          "referenceType": { "type": "string" }
        }
      },
      "GraphNodeResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/GraphNodeDTO" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "GraphNodeWrapperDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "node": { "$ref": "#/components/schemas/GraphNodeDTO" },
          "edges": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GraphEdgeDTO" }
          },
          "id": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "GraphNodesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GraphNodeWrapperDTO" }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "InvalidNonStateReference": {
        "type": "object",
        "properties": {
          "entityId": { "type": "string" },
          "entityType": { "type": "string" }
        }
      },
      "InvalidStateReference": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/ErrorResponse" },
          {
            "type": "object",
            "properties": {
              "targetStateId": { "type": "string" },
              "inboundInvalidNonStateReferences": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidNonStateReference"
                }
              },
              "inboundInvalidStateReferences": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidStateReference"
                }
              },
              "outboundInvalidStateReferences": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidStateReference"
                }
              },
              "errorType": { "type": "string" }
            }
          }
        ]
      },
      "JobAdministrationDTO": {
        "type": "object",
        "properties": {
          "jobId": { "type": "string" },
          "orgId": { "type": "string" },
          "jobType": { "type": "string" },
          "status": {
            "type": "string",
            "enum": ["in_progress", "error", "validation_error", "success"]
          },
          "loggingReason": { "type": "string" },
          "jobDetails": { "type": "string" },
          "createdTime": { "type": "string" },
          "updatedTime": { "type": "string" },
          "createdBy": { "type": "string" },
          "changedBy": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "JobBO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "jobType": { "$ref": "#/components/schemas/JobType" },
          "status": {
            "type": "string",
            "enum": ["in_progress", "error", "validation_error", "success"]
          },
          "details": { "type": "string" },
          "results": {
            "type": "array",
            "items": { "type": "string", "format": "byte" }
          },
          "error": {
            "type": "array",
            "items": { "type": "string", "format": "byte" }
          },
          "orgId": { "type": "string" },
          "createdTime": { "type": "integer", "format": "int64" },
          "updatedTime": { "type": "integer", "format": "int64" },
          "changedBy": { "type": "string" },
          "createdBy": { "type": "string" }
        }
      },
      "JobDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "status": {
            "type": "string",
            "enum": ["in_progress", "error", "validation_error", "success"]
          },
          "jobType": { "type": "string" },
          "error": { "type": "object" },
          "results": { "type": "object" },
          "type": { "type": "string" }
        }
      },
      "JobType": { "type": "object" },
      "MessagingService": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "asdkl234x"
          },
          "eventMeshId": {
            "type": "string",
            "description": "The eventMeshId associated to the messaging service.",
            "example": "67890x23vh"
          },
          "runtimeAgentId": {
            "type": "string",
            "description": "The runtimeAgentId associated to the messaging service.",
            "example": "vh1234y14"
          },
          "solaceCloudMessagingServiceId": {
            "type": "string",
            "description": "The solaceCloudMessagingServiceId associated to the messaging service.",
            "example": "abcd1234x"
          },
          "messagingServiceType": {
            "type": "string",
            "description": "The type of the messaging service.",
            "example": "solace"
          },
          "name": {
            "type": "string",
            "description": "The name of the messaging service.",
            "example": "first messagingService"
          },
          "messagingServiceConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceConnection"
            }
          },
          "eventManagementAgentId": { "type": "string" },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "MessagingServiceAssociationDTO": {
        "type": "object",
        "properties": {
          "messagingServiceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          }
        }
      },
      "MessagingServiceAssociationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessagingServiceAssociationDTO"
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "MessagingServiceAuthentication": {
        "required": ["authenticationType", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "kjsfg32ds"
          },
          "messagingServiceConnectionId": {
            "type": "string",
            "description": "The ID of the connection object associated to the authentication object.",
            "readOnly": true,
            "example": "sdafgj23"
          },
          "name": {
            "type": "string",
            "description": "The name of the authentication object.",
            "example": "https auth details"
          },
          "authenticationType": {
            "type": "string",
            "description": "The type of the authentication object.",
            "example": "basicAuthentication"
          },
          "authenticationDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "A JSON map containing a map of extra details for the authentication.",
              "example": { "broker owner": "Solace PE team" }
            },
            "description": "A JSON map containing a map of extra details for the authentication.",
            "example": { "broker owner": "Solace PE team" }
          },
          "messagingServiceCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceCredentials"
            }
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "MessagingServiceConnection": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "5432dfg3"
          },
          "messagingServiceId": {
            "type": "string",
            "description": "The messagingServiceId associated to the connection object.",
            "readOnly": true,
            "example": "sdkjhg21948"
          },
          "name": {
            "type": "string",
            "description": "The name of the connection object.",
            "example": "my https connection"
          },
          "url": {
            "type": "string",
            "description": "The url of the connection object.",
            "example": "https://abcd.messaging.solace.cloud:943"
          },
          "protocol": {
            "type": "string",
            "description": "The protocol of the connection object.",
            "example": "https"
          },
          "protocolVersion": {
            "type": "string",
            "description": "The protocolVersion of the connection object.",
            "example": "2.0"
          },
          "bindings": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "A JSON map containing a map of connection-specific values. ",
              "example": { "msgVpn": "myVPN" }
            },
            "description": "A JSON map containing a map of connection-specific values. ",
            "example": { "msgVpn": "myVPN" }
          },
          "messagingServiceAuthentications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceAuthentication"
            }
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "MessagingServiceCredentials": {
        "required": ["credentials", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "lkjdsfgew2"
          },
          "messagingServiceAuthenticationId": {
            "type": "string",
            "description": "The ID of the authentication object associated to the credentials object.",
            "readOnly": true,
            "example": "sdafgj23"
          },
          "name": {
            "type": "string",
            "description": "The name of the credentials object.",
            "example": "basic auth credentials"
          },
          "credentials": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "A JSON map containing the credentials information.",
              "example": { "username": "User1", "password": "secretPass" }
            },
            "description": "A JSON map containing the credentials information.",
            "example": { "username": "User1", "password": "secretPass" }
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "MessagingServiceInfoDTO": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "eventMeshId": { "type": "string" },
          "id": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "MessagingServiceOperation": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "kljhwe32"
          },
          "messagingServiceId": {
            "type": "string",
            "description": "The ID of the messaging service.",
            "example": "kjerv32ck"
          },
          "scanTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of scanTypes to be scanned.",
              "example": "[\"KAFKA_BROKER_CONFIGURATION\",\"KAFKA_TOPIC_LISTING\"]",
              "enum": [
                "KAFKA_ALL",
                "KAFKA_BROKER_CONFIGURATION",
                "KAFKA_CLUSTER_CONFIGURATION",
                "KAFKA_CONSUMER_GROUPS",
                "KAFKA_CONSUMER_GROUPS_CONFIGURATION",
                "KAFKA_FEATURES",
                "KAFKA_PRODUCERS",
                "KAFKA_TOPIC_CONFIGURATION",
                "KAFKA_TOPIC_CONFIGURATION_FULL",
                "KAFKA_TOPIC_LISTING",
                "KAFKA_TOPIC_OVERRIDE_CONFIGURATION",
                "SOLACE_ALL",
                "SOLACE_QUEUE_CONFIG",
                "SOLACE_QUEUE_LISTING",
                "SOLACE_SUBSCRIPTION_CONFIG"
              ]
            }
          },
          "destinations": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of destinations for EMA to send results to.",
              "example": "[\"EVENT_PORTAL\",\"FILE_WRITER\"]",
              "enum": ["EVENT_PORTAL", "FILE_WRITER"]
            }
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "MessagingServiceOperationResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/MessagingServiceOperation" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "MessagingServiceRemoveAssociation": {
        "type": "object",
        "properties": {
          "association": {
            "type": "string",
            "description": "The target association to be removed from the messaging service.",
            "example": "EVENT_MANAGEMENT_AGENT",
            "enum": ["RUNTIME_AGENT", "EVENT_MESH", "EVENT_MANAGEMENT_AGENT"]
          }
        }
      },
      "MessagingServiceResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/MessagingService" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "MessagingServiceScan": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "status": {
            "type": "string",
            "description": "The status of the messaging service scan.",
            "readOnly": true,
            "example": "FAILED"
          },
          "statusDescription": {
            "type": "string",
            "description": "The description of the messaging service scan status.",
            "readOnly": true,
            "example": "Scan failed because some scanTypes failed to complete."
          },
          "messagingServiceId": {
            "type": "string",
            "description": "The messagingServiceId of the scan.",
            "readOnly": true,
            "example": "67890x23vh"
          },
          "messagingServiceName": {
            "type": "string",
            "description": "The messagingServiceName of the scan.",
            "readOnly": true,
            "example": "first solace messagingService"
          },
          "scanTypes": {
            "type": "string",
            "description": "The scanTypes that were requested for the scan.",
            "readOnly": true,
            "example": "KAFKA_ALL"
          },
          "destinations": {
            "type": "string",
            "description": "The destinations which EMA will send the scan results.",
            "readOnly": true,
            "example": "EVENT_PORTAL,FILE_WRITER"
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "MessagingServiceScanData": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "scanId": {
            "type": "string",
            "description": "The ID of the scan.",
            "readOnly": true,
            "example": "67890x23vh"
          },
          "dataCollectionType": {
            "type": "string",
            "description": "The type of dataCollection this object holds scan data for.",
            "readOnly": true,
            "example": "SOLACE_QUEUE"
          },
          "data": {
            "type": "string",
            "description": "The scan data in JSON format.",
            "readOnly": true,
            "example": "{\"name\":\"some solace queue name\"}"
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "MessagingServiceScanDataListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessagingServiceScanData" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "MessagingServiceScanDataResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/MessagingServiceScanData" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "MessagingServiceScanLog": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "scanId": {
            "type": "string",
            "description": "The ID of the scan.",
            "readOnly": true,
            "example": "67890x23vh"
          },
          "log": {
            "type": "string",
            "description": "The log message.",
            "readOnly": true,
            "example": "The Scan Is Done."
          },
          "logLevel": {
            "type": "string",
            "description": "The level of the log message.",
            "readOnly": true,
            "example": "INFO"
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "MessagingServiceScanLogListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessagingServiceScanLog" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "MessagingServiceScanResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/MessagingServiceScan" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "MessagingServiceScansResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessagingServiceScan" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "MessagingServicesInfoResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessagingServiceInfoDTO" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "MessagingServicesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessagingService" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "OrgDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "eventPortalAccessEnabled": { "type": "boolean" },
          "topicAddressResourcesAccessEnabled": { "type": "boolean" },
          "createdTime": { "type": "integer", "format": "int64" },
          "updatedTime": { "type": "integer", "format": "int64" },
          "objectLimit": { "type": "integer", "format": "int32" },
          "objectVersionLimit": { "type": "integer", "format": "int32" },
          "applicationDomainLimit": { "type": "integer", "format": "int32" },
          "eventMeshLimit": { "type": "integer", "format": "int32" },
          "eventApiLimit": { "type": "integer", "format": "int32" },
          "eventApiProductLimit": { "type": "integer", "format": "int32" },
          "consumerLimit": { "type": "integer", "format": "int32" },
          "topicDomainLimitPerApplicationDomain": {
            "type": "integer",
            "format": "int32"
          },
          "enumLimit": { "type": "integer", "format": "int32" },
          "enumValueLimit": { "type": "integer", "format": "int32" },
          "messagingServiceLimit": { "type": "integer", "format": "int32" },
          "configurationLimit": { "type": "integer", "format": "int32" },
          "subscriptionLimit": { "type": "integer", "format": "int32" },
          "subscriptionPerApplicationVersionLimit": {
            "type": "integer",
            "format": "int32"
          },
          "graphNodeLimit": { "type": "integer", "format": "int32" },
          "productTier": {
            "type": "string",
            "enum": [
              "None",
              "Standard",
              "Small",
              "Medium",
              "Large",
              "Extra Large",
              "Custom"
            ]
          },
          "organizationType": { "type": "string", "enum": ["enterprise"] },
          "stats": { "$ref": "#/components/schemas/OrgStats" },
          "type": { "type": "string" }
        }
      },
      "OrgStats": {
        "type": "object",
        "properties": {
          "schemaCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "schemaVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "applicationCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "applicationVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "applicationDomainCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventApiCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventApiVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "subscriptionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "consumerCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "enumCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "enumVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "enumValueCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventApiProductCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventApiProductVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "publishedEventApiProductVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "environmentCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventMeshCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "applicationVersionsInEventMeshesCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "customAttributeDefinitionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "customAttributeCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "configurationCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "sumUniqueEventsInEachEnvironmentCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "sumUniqueSchemasInEachEnvironmentCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "sumUniqueApplicationsInEachEnvironmentCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "messageServiceCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caGlobalDefParentCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caGlobalParentValueCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caGlobalDefVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caGlobalVersionValueCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caAppDomainScopedDefParentCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caAppDomainScopedParentValueCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caAppDomainScopedDefVersionCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caAppDomainScopedVersionValueCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caAppDomainScopedAppDomainValueCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caAppDomainScopedAppDomainDefCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caGlobalAppDomainValueCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "caGlobalAppDomainDefCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "OrgsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrgDTO" }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "pageNumber": { "type": "integer", "format": "int32" },
          "count": { "type": "integer", "format": "int32" },
          "pageSize": { "type": "integer", "format": "int32" },
          "nextPage": { "type": "integer", "format": "int32" },
          "totalPages": { "type": "integer", "format": "int32" }
        }
      },
      "Plan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID value of the object",
            "readOnly": true,
            "example": "123456"
          },
          "name": {
            "type": "string",
            "description": "Title of the object",
            "example": "Gold"
          },
          "solaceClassOfServicePolicy": {
            "$ref": "#/components/schemas/SolaceClassOfServicePolicy"
          },
          "type": {
            "type": "string",
            "description": "The type of this payload",
            "readOnly": true,
            "default": "plan"
          }
        }
      },
      "ResponseJobDTO": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/JobDTO" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "ResponseOrgDTO": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/OrgDTO" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "RuntimeAgentFrontEndDTO": {
        "required": ["eventManagementAgentRegionId", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "sdagkjlh32x"
          },
          "name": {
            "type": "string",
            "description": "The name of the EMA.",
            "example": "primary event management agent"
          },
          "region": {
            "type": "string",
            "description": "The region in which the EMA belongs to, extracted from the EventManagementAgentRegion.",
            "readOnly": true,
            "example": "North America"
          },
          "clientUsername": {
            "type": "string",
            "description": "The SMF username for a customer's EMA to use to communicate to event-portal.",
            "readOnly": true,
            "example": "sadhkjl2325sak"
          },
          "clientPassword": {
            "type": "string",
            "description": "The SMF password for a customer's EMA to use to communicate to event-portal.",
            "readOnly": true,
            "example": "SomePassword"
          },
          "referencedByMessagingServiceIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "The list of messagingServiceIds user provides in GET APIs to filter the results.",
              "readOnly": true,
              "example": "[\"1kjdsf32\",\"9875ksdf\"]"
            }
          },
          "orgId": {
            "type": "string",
            "description": "Used by admin APIs to get a list of EMAs against the given orgId",
            "readOnly": true,
            "example": "897xd32"
          },
          "status": {
            "type": "string",
            "description": "The connection status of EP to the actual EMA which this object represents.",
            "readOnly": true,
            "example": "Connected"
          },
          "messagingServicesToUpdate": {
            "type": "array",
            "items": { "type": "string" }
          },
          "messagingServicesToCreate": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessagingService" }
          },
          "messagingServicesToDisassociate": {
            "type": "array",
            "items": { "type": "string" }
          },
          "type": { "type": "string", "readOnly": true },
          "eventManagementAgentRegionId": {
            "type": "string",
            "description": "The ID of the associated EventManagementAgentRegion.",
            "example": "sdfkjh3242ds"
          }
        }
      },
      "RuntimeAgentOperationDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string" },
          "runtimeAgentId": { "type": "string" },
          "messagingServiceId": { "type": "string" },
          "scanType": { "type": "string" },
          "entityTypes": { "type": "array", "items": { "type": "string" } },
          "type": { "type": "string" }
        }
      },
      "RuntimeAgentOperationResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/RuntimeAgentOperationDTO" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "RuntimeAgentRegionInternalDTO": {
        "required": [
          "clientPassword",
          "clientUsername",
          "cloudProvider",
          "host",
          "msgVpn",
          "name",
          "region",
          "sempPassword",
          "sempUsername",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "serviceId": {
            "type": "string",
            "description": "The id of the service from maas-core.",
            "example": "67890x23vh"
          },
          "name": {
            "type": "string",
            "description": "The name of the EventManagementAgentRegion.",
            "example": "primary region"
          },
          "cloudProvider": {
            "type": "string",
            "description": "The name of the cloud provider.",
            "example": "AWS"
          },
          "region": {
            "type": "string",
            "description": "The name of the region.",
            "example": "us-east"
          },
          "host": {
            "type": "string",
            "description": "The host name of the region.",
            "example": "mr-connection-sdtwexd.messaging.solace.cloud"
          },
          "msgVpn": {
            "type": "string",
            "description": "The name of the region's msgVpn.",
            "example": "fooivmr1"
          },
          "port": {
            "type": "integer",
            "description": "The SMF port number.",
            "format": "int32",
            "example": 55443
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "updatedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "sempPort": { "type": "integer", "format": "int32" },
          "clientUsername": { "type": "string" },
          "clientPassword": { "type": "string" },
          "sempUsername": { "type": "string" },
          "sempPassword": { "type": "string" },
          "clientProfileName": { "type": "string" }
        }
      },
      "RuntimeAgentRegionInternalResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RuntimeAgentRegionInternalDTO"
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "RuntimeAgentRegionInternalsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuntimeAgentRegionInternalDTO"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "RuntimeMappingDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "messagingServiceId": { "type": "string" },
          "auditEntityType": {
            "type": "string",
            "enum": [
              "all",
              "kafkaConsumerGroup",
              "kafkaTopic",
              "solaceQueue",
              "solaceTopic"
            ]
          },
          "identifier": { "type": "string" },
          "attributes": { "type": "string" },
          "scanId": { "type": "string" }
        },
        "readOnly": true
      },
      "SchemaObject": {
        "required": [
          "applicationDomainId",
          "contentType",
          "name",
          "schemaType"
        ],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string", "readOnly": true, "example": "12345678" },
          "applicationDomainId": { "type": "string", "example": "12345678" },
          "name": {
            "maxLength": 60,
            "type": "string",
            "example": "My First Schema"
          },
          "shared": { "type": "boolean", "example": false },
          "contentType": {
            "maxLength": 255,
            "type": "string",
            "example": "json"
          },
          "schemaType": {
            "maxLength": 255,
            "type": "string",
            "example": "jsonSchema"
          },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventVersionRefCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "SchemaResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/SchemaObject" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "SchemaVersion": {
        "required": ["schemaId", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string", "readOnly": true, "example": "12345678" },
          "schemaId": { "type": "string", "example": "12345678" },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Schema created by Solace PubSub+ Cloud API documentation"
          },
          "version": {
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "type": "string",
            "example": "1.0.0"
          },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "content": {
            "type": "string",
            "example": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\": \"An example schema\", \"required\": [ \"attribute\", ], \"properties\": { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"string\", \"title\": \"An example of a string based attribute\", \"examples\": [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
          },
          "referencedByEventVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "stateId": { "type": "string", "readOnly": true, "example": "1" },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "SchemaVersionResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/SchemaVersion" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "SchemaVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SchemaVersion" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "SchemasResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SchemaObject" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "SolaceClassOfServicePolicy": {
        "type": "object",
        "description": "Solace class of service policy",
        "allOf": [
          { "$ref": "#/components/schemas/BasePolicyDTO" },
          {
            "type": "object",
            "properties": {
              "messageDeliveryMode": {
                "type": "string",
                "description": "The mode that will be used for message delivery (ex: `guaranteed` uses a queue)",
                "enum": ["direct", "guaranteed", "direct", "guaranteed"],
                "default": "direct"
              },
              "accessType": {
                "type": "string",
                "enum": ["exclusive", "non-exclusive"]
              },
              "maximumTimeToLive": {
                "type": "integer",
                "description": "Duration in seconds of how long a message can live in a queue",
                "format": "int32",
                "example": 1500
              },
              "queueType": {
                "type": "string",
                "description": "The arrangement of queues on a broker used for message delivery (ex: `single` uses one queue per event API version in this event API product)",
                "enum": ["single", "combined", "single", "combined"],
                "default": "combined"
              },
              "maxMsgSpoolUsage": {
                "type": "integer",
                "description": "Total number of MBs available for the queue to use",
                "format": "int32",
                "example": 5
              },
              "type": {
                "type": "string",
                "description": "The type of payload",
                "readOnly": true,
                "default": "solaceClassOfServicePolicy"
              }
            }
          }
        ]
      },
      "SolaceMessagingService": {
        "type": "object",
        "description": "Solace Messaging Services",
        "allOf": [
          { "$ref": "#/components/schemas/BaseMessagingServiceDTO" },
          {
            "type": "object",
            "properties": {
              "solaceCloudMessagingServiceId": {
                "type": "string",
                "example": "service123"
              },
              "type": {
                "type": "string",
                "description": "The type of payload",
                "readOnly": true,
                "default": "solaceManagedMessagingService"
              }
            }
          }
        ]
      },
      "StateChangeRequestResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "StateDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "description": { "type": "string" },
          "name": { "type": "string" },
          "stateOrder": { "type": "integer", "format": "int32" },
          "type": { "type": "string" }
        }
      },
      "StatesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/StateDTO" }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "StitchedEventVersionIdResultDTO": {
        "type": "object",
        "properties": {
          "eventVersionId": { "type": "string" },
          "eventMeshIds": { "type": "array", "items": { "type": "string" } }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "readOnly": true },
          "subscriptionType": { "type": "string", "example": "topic" },
          "value": { "type": "string", "example": "solace/cloud" },
          "attractedEventVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AttractedEventVersionTuple"
            }
          }
        }
      },
      "SubscriptionStitchingEvalRequestDTO": {
        "required": ["brokerType"],
        "type": "object",
        "properties": {
          "brokerType": { "type": "string" },
          "subscriptions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Subscription" }
          }
        }
      },
      "SuggestedAddressLevelDTO": {
        "required": ["addressLevelType", "name"],
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "root" },
          "addressLevelType": {
            "type": "string",
            "enum": ["literal", "variable"]
          },
          "enumVersionId": { "type": "string" },
          "enumVersion": {
            "$ref": "#/components/schemas/TopicAddressEnumVersion"
          }
        }
      },
      "SuggestionApiInputDTO": {
        "required": ["addressLevels"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "addressLevels": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressLevel" }
          },
          "brokerType": { "type": "string" },
          "addressType": { "type": "string", "enum": ["topic"] },
          "id": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "Tag": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string", "readOnly": true, "example": "123456" },
          "name": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "readOnly": true,
            "example": "create"
          },
          "type": {
            "type": "string",
            "description": "The type of this payload, tag.",
            "readOnly": true
          }
        }
      },
      "TagAssociationsObject": {
        "required": ["tags"],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagEntityAssociationsObject"
            }
          }
        }
      },
      "TagEntityAssociationsObject": {
        "required": ["entityType", "tagId"],
        "type": "object",
        "properties": {
          "tagId": { "type": "string" },
          "entityType": { "type": "string" },
          "entitiesToAssociate": {
            "type": "array",
            "items": { "type": "string" }
          },
          "entitiesToDisassociate": {
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "TagResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/Tag" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "TopicAddressEnum": {
        "required": ["applicationDomainId", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "applicationDomainId": { "type": "string", "example": "12345678" },
          "name": {
            "maxLength": 60,
            "type": "string",
            "example": "My First Enum"
          },
          "shared": { "type": "boolean", "example": false },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventVersionRefCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "TopicAddressEnumResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/TopicAddressEnum" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "TopicAddressEnumValue": {
        "required": ["value"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "enumVersionId": { "type": "string", "example": "xyz23mwec2g" },
          "value": { "maxLength": 255, "type": "string", "example": "Ontario" },
          "label": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the value"
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "TopicAddressEnumVersion": {
        "required": ["enumId", "values", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "enumId": { "type": "string", "example": "xyz23mwec2g" },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Enum created by Solace PubSub+ Cloud API documentation"
          },
          "version": { "type": "string", "example": "1.0.0" },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "values": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicAddressEnumValue" }
          },
          "referencedByEventVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "referencedByTopicDomainIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "stateId": { "type": "string", "readOnly": true, "example": "1" },
          "customAttributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomAttribute" }
          },
          "type": { "type": "string", "readOnly": true }
        }
      },
      "TopicAddressEnumVersionResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/TopicAddressEnumVersion" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "TopicAddressEnumVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicAddressEnumVersion" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "TopicAddressEnumsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicAddressEnum" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "TopicAddressResourceDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": { "type": "string" },
          "applicationDomainId": { "type": "string" },
          "name": { "type": "string" },
          "resource": { "type": "string" },
          "description": { "type": "string" },
          "type": { "type": "string" }
        }
      },
      "TopicAddressResourceResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/TopicAddressResourceDTO" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "TopicAddressResourcesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicAddressResourceDTO" }
          },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "TopicDomain": {
        "required": ["addressLevels", "applicationDomainId", "brokerType"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "vck3mzyb2j5"
          },
          "applicationDomainId": { "type": "string", "example": "acb2j5k3mly" },
          "brokerType": { "type": "string", "example": "solace" },
          "addressLevels": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressLevel" }
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "topicDomain"
          }
        }
      },
      "TopicDomainAnalysisDTO": {
        "type": "object",
        "properties": {
          "presentInOtherApplicationDomains": { "type": "boolean" },
          "otherApplicationDomainCount": {
            "type": "integer",
            "format": "int32"
          },
          "otherEntitledApplicationDomains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationDomain" }
          }
        }
      },
      "TopicDomainResponse": {
        "type": "object",
        "properties": {
          "data": { "$ref": "#/components/schemas/TopicDomain" },
          "meta": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        }
      },
      "TopicDomainsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicDomain" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      },
      "TopicFilter": {
        "required": ["eventVersionIds"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "type": "string",
            "description": "name of address node",
            "example": "name"
          },
          "filterValue": {
            "type": "string",
            "description": "Different filter values separated by comma",
            "example": " Tes?, TEST*FILTER, SAmPle"
          },
          "eventVersionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "type": {
            "type": "string",
            "description": "The type of payload",
            "readOnly": true,
            "default": "topicFilter"
          }
        },
        "description": "List of variable that contains address node name and filters"
      },
      "VersionedObjectStateChangeRequest": {
        "type": "object",
        "properties": { "stateId": { "type": "string", "example": "1" } }
      },
      "meta": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        }
      },
      "tagsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Tag" }
          },
          "meta": { "$ref": "#/components/schemas/meta" }
        }
      }
    },
    "securitySchemes": {
      "APIToken": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-enabled": true
  }
}
